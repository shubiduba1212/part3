6b2f4f1e12addf0d9daca52d91ac28a92891984fb0854259753f5a8ef0447919


Jenkins initial setup is required. An admin user has been created and a password generated.
Please use the following password to proceed to installation:

dd7876140a8f468390c5da8684cb5630

This may also be found at: /var/jenkins_home/secrets/initialAdminPassword


99faadf0378b1a107d51d87dc11e3720396a3ea6da82002f4669939959d17f2f

ab668ea68e857ea0f5914f52e843251500349b2b8ffc1ba8ab8850e985b897bc

PS C:\Windows\system32> docker run -d --name mywordpress -e MYSQL_ROOT_PASSWORD=pwd -e MYSQL_DATABASE=wordpress mysql:57
Unable to find image 'mysql:57' locally
docker: Error response from daemon: manifest for mysql:57 not found: manifest unknown: manifest unknown.
See 'docker run --help'.
PS C:\Windows\system32> docker run -d --name mywordpress -e MYSQL_ROOT_PASSWORD=pwd -e MYSQL_DATABASE=wordpress mysql:5.7
ab668ea68e857ea0f5914f52e843251500349b2b8ffc1ba8ab8850e985b897bc
PS C:\Windows\system32> docker run -d -e DB_HOST=mysql -e DB_USER=root -e DB_PASSWORD=pwd --name wordpress --link wordpress:mysql -p 80 wordpress
Unable to find image 'wordpress:latest' locally
latest: Pulling from library/wordpress
09f376ebb190: Already exists
76afcdc86551: Pull complete
ceed4541c527: Pull complete
9ec84be954b0: Pull complete
ff0e278869f9: Pull complete
1693466e4cc6: Pull complete
57c8d94a4882: Pull complete
43af3fe8136a: Pull complete
ddef75e08a5d: Pull complete
a4ba0bdbbf0a: Pull complete
29e89bc69515: Pull complete
bdad27815722: Pull complete
dbbbc9a88332: Pull complete
ca4ce74a758b: Pull complete
b8447b6adfa2: Pull complete
6384f9388f98: Pull complete
ad26f7163064: Pull complete
4b2fddf63d23: Pull complete
5967a1599e89: Pull complete
cabecef25649: Pull complete
c9f0fbb308c3: Pull complete
Digest: sha256:f468bab53528df6f87dfe11a80de26eff57e0f515e243d9dec73a02c80c273a7
Status: Downloaded newer image for wordpress:latest
docker: Error response from daemon: could not get container for wordpress: No such container: wordpress.
See 'docker run --help'.
PS C:\Windows\system32> docker images
REPOSITORY        TAG       IMAGE ID       CREATED        SIZE
jenkins/jenkins   latest    040058fb0c77   39 hours ago   469MB
nginx             latest    4f67c83422ec   7 days ago     188MB
wordpress         latest    c4d738408447   4 weeks ago    685MB
mysql             latest    fcd86ff8ce8c   5 weeks ago    578MB
mysql             5.7       5107333e08a8   5 months ago   501MB
centos            7         eeb6ee3f44bd   2 years ago    204MB
ubuntu            14.04     13b66b487594   3 years ago    197MB
PS C:\Windows\system32> docker run -d -e DB_HOST=mysql -e DB_USER=root -e DB_PASSWORD=pwd --name wordpress --link wordpress:mysql -p 80 wordpress
docker: Error response from daemon: could not get container for wordpress: No such container: wordpress.
See 'docker run --help'.
PS C:\Windows\system32> docker images
REPOSITORY        TAG       IMAGE ID       CREATED        SIZE
jenkins/jenkins   latest    040058fb0c77   39 hours ago   469MB
nginx             latest    4f67c83422ec   7 days ago     188MB
wordpress         latest    c4d738408447   4 weeks ago    685MB
mysql             latest    fcd86ff8ce8c   5 weeks ago    578MB
mysql             5.7       5107333e08a8   5 months ago   501MB
centos            7         eeb6ee3f44bd   2 years ago    204MB
ubuntu            14.04     13b66b487594   3 years ago    197MB
PS C:\Windows\system32> docker rm docker mysql
Error response from daemon: No such container: docker
Error response from daemon: No such container: mysql
PS C:\Windows\system32> docker stop
"docker stop" requires at least 1 argument.
See 'docker stop --help'.

Usage:  docker stop [OPTIONS] CONTAINER [CONTAINER...]

Stop one or more running containers
PS C:\Windows\system32> docker rm wordpress
Error response from daemon: No such container: wordpress
PS C:\Windows\system32> docker rm mysql
Error response from daemon: No such container: mysql
PS C:\Windows\system32> docker run -d --name mywordpress1 -e MYSQL_ROOT_PASSWORD=pwd -e MYSQL_DATABASE=wordpress mysql:5.7
d83e561d5a9d08a7f9d88880516d92c126c545f264479f8b1d4f52baf2ba218d
PS C:\Windows\system32> docker run -d -e DB_HOST=mysql -e DB_USER=root -e DB_PASSWORD=pwd --name wordpress --link mywordpress1:mysql -p 80 wordpress
0d1b1a9d63a177cd2defcaa8be02a31bd0df950994b758de4ffd77b31ca224b1
PS C:\Windows\system32> docker port 0d1b1a9d63a177cd2defcaa8be02a31bd0df950994b758de4ffd77b31ca224b1
80/tcp -> 0.0.0.0:53109
PS C:\Windows\system32> docker images
REPOSITORY        TAG       IMAGE ID       CREATED        SIZE
jenkins/jenkins   latest    040058fb0c77   39 hours ago   469MB
nginx             latest    4f67c83422ec   7 days ago     188MB
wordpress         latest    c4d738408447   4 weeks ago    685MB
mysql             latest    fcd86ff8ce8c   5 weeks ago    578MB
mysql             5.7       5107333e08a8   5 months ago   501MB
centos            7         eeb6ee3f44bd   2 years ago    204MB
ubuntu            14.04     13b66b487594   3 years ago    197MB
PS C:\Windows\system32> docker ps
CONTAINER ID   IMAGE       COMMAND                   CREATED          STATUS          PORTS                   NAMES
0d1b1a9d63a1   wordpress   "docker-entrypoint.s…"   2 minutes ago    Up 2 minutes    0.0.0.0:53109->80/tcp   wordpress
d83e561d5a9d   mysql:5.7   "docker-entrypoint.s…"   3 minutes ago    Up 3 minutes    3306/tcp, 33060/tcp     mywordpress1
ab668ea68e85   mysql:5.7   "docker-entrypoint.s…"   14 minutes ago   Up 14 minutes   3306/tcp, 33060/tcp     mywordpress
PS C:\Windows\system32> docker rm mywordpress
Error response from daemon: cannot remove container "/mywordpress": container is running: stop the container before removing or force remove
PS C:\Windows\system32> docker stop mywordpress
mywordpress
PS C:\Windows\system32> docker rm mywordpress
mywordpress
PS C:\Windows\system32> docker ps
CONTAINER ID   IMAGE       COMMAND                   CREATED         STATUS         PORTS                   NAMES
0d1b1a9d63a1   wordpress   "docker-entrypoint.s…"   3 minutes ago   Up 3 minutes   0.0.0.0:53109->80/tcp   wordpress
d83e561d5a9d   mysql:5.7   "docker-entrypoint.s…"   4 minutes ago   Up 3 minutes   3306/tcp, 33060/tcp     mywordpress1
PS C:\Windows\system32> docker stop wordpress
wordpress
PS C:\Windows\system32> docker run wordpress
WordPress not found in /var/www/html - copying now...
Complete! WordPress has been successfully copied to /var/www/html
AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message
AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message
[Thu Jun 06 05:43:24.578722 2024] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.59 (Debian) PHP/8.2.19 configured -- resuming normal operations
[Thu Jun 06 05:43:24.578776 2024] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'
[Thu Jun 06 05:43:54.987324 2024] [mpm_prefork:notice] [pid 1] AH00169: caught SIGTERM, shutting down
PS C:\Windows\system32> docker ps
CONTAINER ID   IMAGE       COMMAND                   CREATED         STATUS         PORTS                 NAMES
d83e561d5a9d   mysql:5.7   "docker-entrypoint.s…"   5 minutes ago   Up 5 minutes   3306/tcp, 33060/tcp   mywordpress1
PS C:\Windows\system32> docker port 0d1b1a9d63a177cd2defcaa8be02a31bd0df950994b758de4ffd77b31ca224b1
PS C:\Windows\system32> docker run -d --name mywordpress2 -e MYSQL_ROOT_PASSWORD=pwd -e MYSQL_DATABASE=wordpress mysql:5.7
55d767bc14c7033ce23078c457e1e5baa2b8057d48d62d019a6f56ed3babe142
PS C:\Windows\system32> docker run -d -e DB_HOST=mysql -e DB_USER=root -e DB_PASSWORD=pwd --name wordpress --link mywordpress2:mysql -p 80 wordpress
docker: Error response from daemon: Conflict. The container name "/wordpress" is already in use by container "0d1b1a9d63a177cd2defcaa8be02a31bd0df950994b758de4ffd77b31ca224b1". You have to remove (or rename) that container to be able to reuse that name.
See 'docker run --help'.
PS C:\Windows\system32> docker run -d -e DB_HOST=mysql -e DB_USER=root -e DB_PASSWORD=pwd --name wordpress1 --link mywordpress2:mysql -p 80 wordpress
ce94622822472d2831e226bcc08598ed71cacd5f978683642cac493b2b6461f3
PS C:\Windows\system32> docker port ce94622822472d2831e226bcc08598ed71cacd5f978683642cac493b2b6461f3                                      80/tcp -> 0.0.0.0:53201
PS C:\Windows\system32> docker ps
CONTAINER ID   IMAGE       COMMAND                   CREATED              STATUS              PORTS                   NAMES
ce9462282247   wordpress   "docker-entrypoint.s…"   56 seconds ago       Up 55 seconds       0.0.0.0:53201->80/tcp   wordpress1
55d767bc14c7   mysql:5.7   "docker-entrypoint.s…"   About a minute ago   Up About a minute   3306/tcp, 33060/tcp     mywordpress2
d83e561d5a9d   mysql:5.7   "docker-entrypoint.s…"   8 minutes ago        Up 8 minutes        3306/tcp, 33060/tcp     mywordpress1
PS C:\Windows\system32> docker exec -i -t mywordpress2\bin\bash
"docker exec" requires at least 2 arguments.
See 'docker exec --help'.

Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

Execute a command in a running container

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2\bin\bash
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> mysql -u root -p
mysql : 'mysql' 용어가 cmdlet, 함수, 스크립트 파일 또는 실행할 수 있는 프로그램 이름 으로 인식되지 않습니다. 이름이 정확한지 확인하고 경로
가 포함된 경우 경로가 올바른지 검증한 다음 다시 시도하십시오.
위치 줄:1 문자:1
+ mysql -u root -p
+ ~~~~~
    + CategoryInfo          : ObjectNotFound: (mysql:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Windows\system32> docker exec -i -t mywordpress2 \bin \bash
OCI runtime exec failed: exec failed: unable to start container process: exec: "\\bin": executable file not found in $PATH: unknown

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t mywordpress2 \bin\bash
OCI runtime exec failed: exec failed: unable to start container process: exec: "\\bin\\bash": executable file not found in $PATH: unknown

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t mywordpress2 \bin \bash
OCI runtime exec failed: exec failed: unable to start container process: exec: "\\bin": executable file not found in $PATH: unknown

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t mywordpress2 bin bash
OCI runtime exec failed: exec failed: unable to start container process: exec: "bin": executable file not found in $PATH: unknown

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t mywordpress2 \bin\bash
OCI runtime exec failed: exec failed: unable to start container process: exec: "\\bin\\bash": executable file not found in $PATH: unknown

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t mywordpress2 /bin/bash
bash-4.2# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.7.44 MySQL Community Server (GPL)

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>
What's next?D
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t mywordpress2 /bin/bash
bash-4.2# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.44 MySQL Community Server (GPL)

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> create table 'member';
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''member'' at line 1
mysql> create table 'members';
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''members'' at line 1
mysql> create table 'members'(member_name varchar(30), member_id varchar(30), member_email varchar(30));
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''members'(member_name varchar(30), member_id varchar(30), member_email varchar(3' at line 1
mysql> create database shubidubDB
    -> create table 'members'(member_name varchar(30), member_id varchar(30), member_email varchar(30));
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'create table 'members'(member_name varchar(30), member_id varchar(30), member_em' at line 2
mysql> create table if not exists 'members'(member_name varchar(30), member_id varcha
r(30), member_email varchar(30));
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''members'(member_name varchar(30), member_id varchar(30), member_email varchar(3' at line 1
mysql> create table if not exists 'members'(member_name, member_id, member_email);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''members'(member_name, member_id, member_email)' at line 1
mysql> create table 'membersTest'(member_name varchar(30), member_id varchar(30), mem
ber_email varchar(30));
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''membersTest'(member_name varchar(30), member_id varchar(30), member_email varch' at line 1
mysql> drop table membersTest
    -> use shubidubDB
    -> create table 'test'(member_name, member_id, member_email);
ERROR 1046 (3D000): No database selected
mysql> use shubidubDB
ERROR 1049 (42000): Unknown database 'shubidubDB'
mysql> create database shubidubDB
    -> use shudibubDB
    -> create table 'test'(member_name, member_id, member_eamil);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'use shudibubDB
create table 'test'(member_name, member_id, member_eamil)' at line 2
mysql> use shubidubDB
ERROR 1049 (42000): Unknown database 'shubidubDB'
mysql> drop database shudibubDB
    -> use shudibubDB
    -> create database shubidubDB
    -> use shubidubDB
    -> create database shubidubDB;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'use shudibubDB
create database shubidubDB
use shubidubDB
create database shubidu' at line 2
mysql> create database shubidubdb;
Query OK, 1 row affected (0.00 sec)

mysql> use shubidubdb;
Database changed
mysql> create table 'test'(member_code int auto_increment, member_name varchar(30),member_email varchar(30));
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''test'(member_code int auto_increment, member_name varchar(30),member_email varc' at line 1
mysql> create table 'test'(member_code int auto_increment, member_name varchar(30)mem
What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug mywordpress2
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t mywordpress2 /bin/bash
bash-4.2# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 4
Server version: 5.7.44 MySQL Community Server (GPL)

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> use shubidubdb;
Database changed
mysql> create table if not exists 'test';
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''test'' at line 1
mysql> create table if not exists 'test'(code, name, email);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''test'(code, name, email)' at line 1
mysql> show database;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'database' at line 1
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| shubidubdb         |
| sys                |
| wordpress          |
+--------------------+
6 rows in set (0.00 sec)

mysql> use shubidubdb;
Database changed
mysql> create table test(name varchar(30), email varchar(30));
Query OK, 0 rows affected (0.01 sec)

mysql> select * from test;
Empty set (0.00 sec)

mysql> insert into test values('shubidub', 'user01@shubidub.com');
Query OK, 1 row affected (0.00 sec)

mysql> select * from test;
+----------+---------------------+
| name     | email               |
+----------+---------------------+
| shubidub | user01@shubidub.com |
+----------+---------------------+
1 row in set (0.00 sec)

mysql>


// python app 파일 만들어서 실행해보기 - 로컬에 python 설치하지 않은 상태로
PS C:\> cd project
PS C:\project> ls
PS C:\project> notepad app.py
PS C:\project> notepad DockerFile
PS C:\project> docker build -t flask_test.
ERROR: "docker buildx build" requires exactly 1 argument.
See 'docker buildx build --help'.

Usage:  docker buildx build [OPTIONS] PATH | URL | -

Start a build
PS C:\project> docker build -t flask_test
ERROR: "docker buildx build" requires exactly 1 argument.
See 'docker buildx build --help'.

Usage:  docker buildx build [OPTIONS] PATH | URL | -

Start a build
PS C:\project> ls


    디렉터리: C:\project


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----      2024-06-06   오후 3:31            157 app.py
-a----      2024-06-06   오후 3:34            127 DockerFile.txt


PS C:\project> mv .\DockerFile.txt DockerFile
PS C:\project> ls


    디렉터리: C:\project


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----      2024-06-06   오후 3:31            157 app.py
-a----      2024-06-06   오후 3:34            127 DockerFile


PS C:\project> mv .\DockerFile Dockerfile
PS C:\project> ls


    디렉터리: C:\project


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----      2024-06-06   오후 3:31            157 app.py
-a----      2024-06-06   오후 3:34            127 Dockerfile


PS C:\project> docker build -t flask_test.
ERROR: "docker buildx build" requires exactly 1 argument.
See 'docker buildx build --help'.

Usage:  docker buildx build [OPTIONS] PATH | URL | -

Start a build
PS C:\project> docker build -t flask_test
ERROR: "docker buildx build" requires exactly 1 argument.
See 'docker buildx build --help'.

Usage:  docker buildx build [OPTIONS] PATH | URL | -

Start a build
PS C:\project> docker build -t flask_test .
[+] Building 0.4s (1/1) FINISHED                                      docker:default
 => [internal] load build definition from Dockerfile                            0.1s
 => => transferring dockerfile: 164B                                            0.0s
Dockerfile:2
--------------------
   1 |     FROM python:3.8-slim
   2 | >>> COPY ./app
   3 |     RUN pip3 install flask
   4 |     WORKDIR /app
--------------------
ERROR: failed to solve: dockerfile parse error on line 2: COPY requires at least two arguments, but only one was provided. Destination could not be determined
PS C:\project> docker run -p 5001:5000 flask_test
Unable to find image 'flask_test:latest' locally
docker: Error response from daemon: pull access denied for flask_test, repository does not exist or may require 'docker login': denied: requested access to the resource is denied.
See 'docker run --help'.
PS C:\project> docker build -t flask_test .
[+] Building 0.0s (1/1) FINISHED                                      docker:default
 => [internal] load build definition from Dockerfile                            0.0s
 => => transferring dockerfile: 164B                                            0.0s
Dockerfile:2
--------------------
   1 |     FROM python:3.8-slim
   2 | >>> COPY ./app
   3 |     RUN pip3 install flask
   4 |     WORKDIR /app
--------------------
ERROR: failed to solve: dockerfile parse error on line 2: COPY requires at least two arguments, but only one was provided. Destination could not be determined
PS C:\project> mv .\Dockerfile DockerFile.txt
mv : 파일이 이미 있으므로 만들 수 없습니다.
위치 줄:1 문자:1
+ mv .\Dockerfile DockerFile.txt
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : WriteError: (C:\project\Dockerfile:FileInfo) [Move-It
   em], IOException
    + FullyQualifiedErrorId : MoveFileInfoItemIOError,Microsoft.PowerShell.Commands
   .MoveItemCommand

PS C:\project> mv .\Dockerfile Dockerfile.txt
mv : 파일이 이미 있으므로 만들 수 없습니다.
위치 줄:1 문자:1
+ mv .\Dockerfile Dockerfile.txt
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : WriteError: (C:\project\Dockerfile:FileInfo) [Move-It
   em], IOException
    + FullyQualifiedErrorId : MoveFileInfoItemIOError,Microsoft.PowerShell.Commands
   .MoveItemCommand

PS C:\project> ls


    디렉터리: C:\project


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----      2024-06-06   오후 3:31            157 app.py
-a----      2024-06-06   오후 3:34            127 Dockerfile
-a----      2024-06-06   오후 3:47            128 DockerFile.txt


PS C:\project> rm .\Dockerfile.txt
PS C:\project> ls


    디렉터리: C:\project


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----      2024-06-06   오후 3:31            157 app.py
-a----      2024-06-06   오후 3:34            127 Dockerfile


PS C:\project> docker build -t flask_test .
[+] Building 0.0s (0/0)  docker:default
2024/06/06 15:48:39 http2: server: error reading preface from client //./pipe/docker_[+] Building 23.2s (10/10) FINISHED                                   docker:default
 => [internal] load build definition from Dockerfile                            0.0s
 => => transferring dockerfile: 167B                                            0.0s
 => [internal] load metadata for docker.io/library/python:3.8-slim              2.7s
 => [auth] library/python:pull token for registry-1.docker.io                   0.0s
 => [internal] load .dockerignore                                               0.0s
 => => transferring context: 2B                                                 0.0s
 => [internal] load build context                                               0.0s
 => => transferring context: 361B                                               0.0s
 => [1/4] FROM docker.io/library/python:3.8-slim@sha256:2189174fda5dead11e719d  3.1s
 => => resolve docker.io/library/python:3.8-slim@sha256:2189174fda5dead11e719d  0.0s
 => => sha256:e5c23cad8c0cd80af0d46285ecf0fa3de6551fe9c5224b 11.68MB / 11.68MB  1.9s
 => => sha256:a56c5f373d6612d177701b2afbd4ababf19e1da0dd101e5fbdc3 245B / 245B  0.7s
 => => sha256:2189174fda5dead11e719d74f5edd7bff16be40101fb0952 1.86kB / 1.86kB  0.0s
 => => sha256:1304b99fb13582301d177e47a9123a1ddf605f44f54fd7a5 1.37kB / 1.37kB  0.0s
 => => sha256:4b496152a4e5e025f5c831e78084ceec27aecd872d5e0bee 6.95kB / 6.95kB  0.0s
 => => sha256:276709cbedc1f168290ee408fca2af2aacfeb4f922ddca12 3.51MB / 3.51MB  0.6s
 => => extracting sha256:276709cbedc1f168290ee408fca2af2aacfeb4f922ddca125e9e8  0.3s
 => => sha256:52a9244356561d0217125ad9f890c6eed5e972356ed50376 3.14MB / 3.14MB  1.5s
 => => extracting sha256:e5c23cad8c0cd80af0d46285ecf0fa3de6551fe9c5224bc88ebb5  0.6s
 => => extracting sha256:a56c5f373d6612d177701b2afbd4ababf19e1da0dd101e5fbdc3c  0.0s
 => => extracting sha256:52a9244356561d0217125ad9f890c6eed5e972356ed50376336b6  0.3s
 => [2/4] COPY . /app                                                           1.7s
 => [3/4] RUN pip3 install flask                                                9.6s
 => [4/4] WORKDIR /app                                                          0.1s
 => exporting to image                                                          3.3s
 => => exporting layers                                                         1.9s
 => => writing image sha256:51d9767b32b82e8e527071f352ee78ae0409747e88e314b234  0.1s
 => => naming to docker.io/library/flask_test                                   0.2s

What's Next?
  View a summary of image vulnerabilities and recommendations → docker scout quickview
PS C:\project> docker run -p 5001:5000 flask_test
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/usr/local/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/usr/local/lib/python3.8/site-packages/flask/__main__.py", line 3, in <module>
    main()
  File "/usr/local/lib/python3.8/site-packages/flask/cli.py", line 1105, in main
    cli.main()
  File "/usr/local/lib/python3.8/site-packages/click/core.py", line 1078, in main
    rv = self.invoke(ctx)
  File "/usr/local/lib/python3.8/site-packages/click/core.py", line 1688, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/usr/local/lib/python3.8/site-packages/click/core.py", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/usr/local/lib/python3.8/site-packages/click/core.py", line 783, in invoke
    return __callback(*args, **kwargs)
  File "/usr/local/lib/python3.8/site-packages/click/decorators.py", line 92, in new_func
    return ctx.invoke(f, obj, *args, **kwargs)
  File "/usr/local/lib/python3.8/site-packages/click/core.py", line 783, in invoke
    return __callback(*args, **kwargs)
  File "/usr/local/lib/python3.8/site-packages/flask/cli.py", line 953, in run_command
    raise e from None
  File "/usr/local/lib/python3.8/site-packages/flask/cli.py", line 937, in run_command
    app: WSGIApplication = info.load_app()
  File "/usr/local/lib/python3.8/site-packages/flask/cli.py", line 339, in load_app
    app = locate_app(import_name, None, raise_if_not_found=False)
  File "/usr/local/lib/python3.8/site-packages/flask/cli.py", line 245, in locate_app
    __import__(module_name)
  File "/app/app.py", line 8
    if__name__ =="__main__":
                           ^
SyntaxError: invalid syntax
PS C:\project> docker build -t flask_test .
[+] Building 0.0s (0/0)  docker:default
2024/06/06 15:50:00 http2: server: error reading preface from client //./pipe/docker_[+] Building 11.1s (9/9) FINISHED                                     docker:default
 => [internal] load build definition from Dockerfile                            0.2s
 => => transferring dockerfile: 167B                                            0.0s
 => [internal] load metadata for docker.io/library/python:3.8-slim              1.0s
 => [internal] load .dockerignore                                               0.1s
 => => transferring context: 2B                                                 0.0s
 => [internal] load build context                                               0.1s
 => => transferring context: 227B                                               0.0s
 => CACHED [1/4] FROM docker.io/library/python:3.8-slim@sha256:2189174fda5dead  0.0s
 => [2/4] COPY . /app                                                           1.1s
 => [3/4] RUN pip3 install flask                                                7.9s
 => [4/4] WORKDIR /app                                                          0.1s
 => exporting to image                                                          0.2s
 => => exporting layers                                                         0.2s
 => => writing image sha256:ed70a65de8dad2460b23b55efea5700fb36719a9d2816323f7  0.0s
 => => naming to docker.io/library/flask_test                                   0.0s

What's Next?
  View a summary of image vulnerabilities and recommendations → docker scout quickview
PS C:\project> docker run -p 5001:5000 flask_test
 * Debug mode: off
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://172.17.0.5:5000
Press CTRL+C to quit
172.17.0.1 - - [06/Jun/2024 06:50:35] "GET / HTTP/1.1" 200 -
172.17.0.1 - - [06/Jun/2024 06:50:35] "GET /favicon.ico HTTP/1.1" 404 -

PS C:\Windows\system32> docker ps
CONTAINER ID   IMAGE        COMMAND                   CREATED             STATUS             PORTS                    NAMES
b9976e89d3bd   flask_test   "python3 -m flask ru…"   5 minutes ago       Up 5 minutes       0.0.0.0:5001->5000/tcp   nice_wiles
ce9462282247   wordpress    "docker-entrypoint.s…"   About an hour ago   Up About an hour   0.0.0.0:53201->80/tcp    wordpress1
55d767bc14c7   mysql:5.7    "docker-entrypoint.s…"   About an hour ago   Up About an hour   3306/tcp, 33060/tcp      mywordpress2
d83e561d5a9d   mysql:5.7    "docker-entrypoint.s…"   About an hour ago   Up About an hour   3306/tcp, 33060/tcp      mywordpress1
PS C:\Windows\system32> docker exec -i -t flask_test /bin/bash
Error response from daemon: No such container: flask_test

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug flask_test
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker exec -i -t flask_test /bin/bash
Error response from daemon: No such container: flask_test

What's next?
  Try Docker Debug for seamless, persistent debugging tools in any container or image → docker debug flask_test
  Learn more at https://docs.docker.com/go/debug-cli/
PS C:\Windows\system32> docker ps
CONTAINER ID   IMAGE        COMMAND                   CREATED             STATUS             PORTS                    NAMES
b9976e89d3bd   flask_test   "python3 -m flask ru…"   7 minutes ago       Up 7 minutes       0.0.0.0:5001->5000/tcp   nice_wiles
ce9462282247   wordpress    "docker-entrypoint.s…"   About an hour ago   Up About an hour   0.0.0.0:53201->80/tcp    wordpress1
55d767bc14c7   mysql:5.7    "docker-entrypoint.s…"   About an hour ago   Up About an hour   3306/tcp, 33060/tcp      mywordpress2
d83e561d5a9d   mysql:5.7    "docker-entrypoint.s…"   About an hour ago   Up About an hour   3306/tcp, 33060/tcp      mywordpress1
PS C:\Windows\system32> docker inspect flask_test
[
    {
        "Id": "sha256:ed70a65de8dad2460b23b55efea5700fb36719a9d2816323f7423cae591b7b2c",
        "RepoTags": [
            "flask_test:latest"
        ],
        "RepoDigests": [],
        "Parent": "",
        "Comment": "buildkit.dockerfile.v0",
        "Created": "2024-06-06T06:50:13.217501792Z",
        "ContainerConfig": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": null,
            "Cmd": null,
            "Image": "",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": null
        },
        "DockerVersion": "",
        "Author": "",
        "Config": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "LANG=C.UTF-8",
                "GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568",
                "PYTHON_VERSION=3.8.19",
                "PYTHON_PIP_VERSION=23.0.1",
                "PYTHON_SETUPTOOLS_VERSION=57.5.0",
                "PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/dbf0c85f76fb6e1ab42aa672ffca6f0a675d9ee4/public/get-pip.py",
                "PYTHON_GET_PIP_SHA256=dfe9fd5c28dc98b5ac17979a953ea550cec37ae1b47a5116007395bfacff2ab9"
            ],
            "Cmd": [
                "python3",
                "-m",
                "flask",
                "run",
                "--host=0.0.0.0"
            ],
            "ArgsEscaped": true,
            "Image": "",
            "Volumes": null,
            "WorkingDir": "/app",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": null
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Size": 137242360,
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/ev1mmp42ruo2novgvk6hsyh0l/diff:/var/lib/docker/overlay2/rfhc7368ohonjfdtlzwkofba8/diff:/var/lib/docker/overlay2/bdccac02276e18b10bf13612fc6d4cc9a8d24c51292aa5dc8d418f5090c55970/diff:/var/lib/docker/overlay2/4a729f12c36781e189d20b3d35fe91cbf8d9f9af8b43a3703c6ab67afb392259/diff:/var/lib/docker/overlay2/96b36a026958662e8cb09f38021ebe288079919bb6decd732a6bb6c041f0aa77/diff:/var/lib/docker/overlay2/d2d632a97536e7b70af943552dbe94e48eb4ead6b502ba8f48aad8b2f84276f7/diff:/var/lib/docker/overlay2/1542f10a6bbba93f2ae5a6982d3728924b9aa1996dc817e62badc3e23fda51e2/diff",
                "MergedDir": "/var/lib/docker/overlay2/qv8be8joiv47bz4karft1qb8j/merged",
                "UpperDir": "/var/lib/docker/overlay2/qv8be8joiv47bz4karft1qb8j/diff",
                "WorkDir": "/var/lib/docker/overlay2/qv8be8joiv47bz4karft1qb8j/work"
            },
            "Name": "overlay2"
        },
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:5d4427064ecc46e3c2add169e9b5eafc7ed2be7861081ec925938ab628ac0e25",
                "sha256:146826fa3ca090520765c1cee50f779ead1662bfd94d413cff5b9ba519b23a7a",
                "sha256:0ca9c54a3df37f43b3e2ebaad49f6ed8937252e988444810dd47f9c763c02fb0",
                "sha256:485ab5a9ccae4840629684176fd60e2da85d1f6b6dfe7c95b1e9a7a265824a24",
                "sha256:9efd78ff03ee658e882b5a59a2168dadf3683f36f32786f311265af0bb4833e4",
                "sha256:003e6982c653a5221ef3573efcd48b9344afeedd085fe868e9261789c0d0bb4c",
                "sha256:f1733643e6c27a26fbc9a697769ac11203a39a06dce38a65fa06d48720270590",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
            ]
        },
        "Metadata": {
            "LastTagTime": "2024-06-06T06:50:13.401527629Z"
        },
        "Container": ""
    }
]
PS C:\Windows\system32> docker exec -i -t nice_wiles /bin/bash
root@b9976e89d3bd:/app# ls
Dockerfile  __pycache__  app.py
root@b9976e89d3bd:/app# cat app.file
cat: app.file: No such file or directory
root@b9976e89d3bd:/app# cat app.python
cat: app.python: No such file or directory
root@b9976e89d3bd:/app# cat app.py
from flask import Flask
app=Flask(__name__)

@app.route("/")
def hello():
  return "Hello World!"

if __name__ =="__main__":
  app.run(host='0.0.0.0')root@b9976e89d3bd:/app#

https://github.com/suhyunjeon/k8s-wordpress/

